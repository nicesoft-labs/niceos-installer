variables:
    POI_IMAGE_NAME: photon/installer:$CI_COMMIT_SHORT_SHA
    GITHUB_BRANCH: master
    POI_REGISTRY: poi-registry:5000

stages:
- build
- test
- github
- deploy

build-container:
    stage: build
    needs: []
    script:
        - cd docker && docker build -t ${POI_IMAGE_NAME} --build-context poi-helper=$(realpath $(pwd)/..) .
        - docker tag ${POI_IMAGE_NAME} ${POI_REGISTRY}/${POI_IMAGE_NAME}
        - docker push ${POI_REGISTRY}/${POI_IMAGE_NAME}
        - docker system prune -f

cayman_poi:
    stage: build
    needs: []
    script:
        - ./ci/gitlab/submodule_ci.py --private-token=$CAYMAN_POI_CICD_API_TOKEN --project-id core-build/cayman_photon-os-installer --branch test/poi-submodule/$CI_COMMIT_SHORT_SHA --parent-branch vmware-master --submodule-path poi/src --submodule-sha $CI_COMMIT_SHA

pytest:
    stage: test
    needs:
        - build-container
    script:
        - docker pull ${POI_REGISTRY}/${POI_IMAGE_NAME}
        - docker tag ${POI_REGISTRY}/${POI_IMAGE_NAME} ${POI_IMAGE_NAME}
        - pytest-3 -x tests/poi-container-test.py
    after_script:
        # change ownerships for cleanup
        - cd tests/
        - sudo chown -R $(id -u -n):$(id -g -n) .

ova-poi-harness:
    variables:
        VM_NAME_BASE: ova-poi-harness-${CI_COMMIT_SHORT_SHA}
    stage: test
    needs:
        - build-container
    parallel:
        matrix:
            - NAME:
                - minimal
                - minimal_lvm
                - minimal_secure
              OVA_CONFIG: minimal_ova.yaml
            - NAME: gitlab-runner
              OVA_CONFIG: gitlab-runner_ova.yaml
            - NAME: minimal
              OVA_CONFIG: minimal_ova.yaml
              PHOTON_RELEASE: "4.0"

    script:
        - KS_FILE=${NAME}_ks.yaml
        - PHOTON_RELEASE="${PHOTON_RELEASE:-5.0}"
        - VM_NAME=${VM_NAME_BASE}-${NAME}-${PHOTON_RELEASE}

        - docker pull ${POI_REGISTRY}/${POI_IMAGE_NAME}
        - docker tag ${POI_REGISTRY}/${POI_IMAGE_NAME} ${POI_IMAGE_NAME}

        - cd examples/ova
        - docker run --rm --privileged -v/dev:/dev -v$(pwd):/workdir ${POI_IMAGE_NAME} create-image --repo-paths= -c ${KS_FILE} -v ${PHOTON_RELEASE}
        - docker run --rm -v$(pwd):/workdir -w/workdir ${POI_IMAGE_NAME} create-ova --ovf --mf --vmdk --installer-config ${KS_FILE} --ova-config ${OVA_CONFIG}
        # clone the harness code
        - git clone --depth=1 https://:${POI_HARNESS_PULL_TOKEN}@${CI_SERVER_HOST}/photon/poi-harness.git
        - (cd poi-harness && echo "poi-harness sha is $(git rev-parse --short HEAD)")
        - pytest ./poi-harness/ci/pytest/ -rs --deploy --ovf *.ovf --name ${VM_NAME} --vc_config ${VC_CONFIG_FILE} --ks_config ${KS_FILE} --ova_config ${OVA_CONFIG}
    after_script:
        # change ownerships for cleanup
        - cd examples/ova
        - sudo chown -R $(id -u -n):$(id -g -n) .

iso-poi-harness:
    variables:
        ISO_OVF: photon5-iso-boot-${CI_COMMIT_SHORT_SHA}.ovf
        VM_NAME_BASE: poi-iso-boot-${CI_COMMIT_SHORT_SHA}
    stage: test
    needs:
        - build-container
    parallel:
        matrix:
            - NAME:
                - minimal
                - ostree
    script:
        - VM_NAME=${VM_NAME_BASE}-${NAME}
        - KS_FILE=${NAME}_ks.yaml
        - docker pull ${POI_REGISTRY}/${POI_IMAGE_NAME}
        - docker tag ${POI_REGISTRY}/${POI_IMAGE_NAME} ${POI_IMAGE_NAME}
        - cd examples/iso
        # create ISO
        - docker run --rm --privileged -v/dev:/dev -v$(pwd):/workdir ${POI_IMAGE_NAME} photon-iso-builder --config iso.yaml
        # create OVF that includes that ISO, and a blank hard disk
        # base64 encode the ks file, must have no new lines (-w0)
        - KSDATA64=$(base64 -w0 < ${KS_FILE})
        - docker run --rm -v$(pwd):/workdir ${POI_IMAGE_NAME} ova-compose -i iso_ova.yaml -o ${ISO_OVF} -m --param ksdata64=${KSDATA64}
        # clone the harness code
        - git clone --depth=1 https://:${POI_HARNESS_PULL_TOKEN}@${CI_SERVER_HOST}/photon/poi-harness.git
        # POI harness will deploy OVF on a VC and run tests
        - pytest ./poi-harness/ci/pytest/ -rs --deploy --ovf ${ISO_OVF} --name ${VM_NAME} --vc_config ${VC_CONFIG_FILE} --ks_config ${KS_FILE} --ova_config iso_ova.yaml --param ksdata64=${KSDATA64}
    after_script:
        # change ownerships for cleanup
        - cd examples/iso
        - sudo chown -R $(id -u -n):$(id -g -n) .

github:
    stage: github
    rules:
        # only for the master branch
        - if: $CI_COMMIT_REF_NAME == $GITHUB_BRANCH
    variables:
        # need clone strategy or adding a remote will fail if it exists
        GIT_STRATEGY: clone
        GITHUB_USER: gerrit-photon
    script:
        - git checkout $CI_COMMIT_REF_NAME
        - git remote add github https://$GITHUB_USER:$GERRIT_PHOTON_GITHUB_TOKEN@github.com/vmware/photon-os-installer.git
        - git push github

push-image:
    # no `needs` entry - this should run at last job, only when all others have succeeded
    stage: deploy
    rules:
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    variables:
        ARTIFACTORY_SERVER: photon-docker-prod-local.usw5.packages.broadcom.com
    script:
        - set -e
        - docker pull ${POI_REGISTRY}/${POI_IMAGE_NAME}
        - docker tag ${POI_REGISTRY}/${POI_IMAGE_NAME} ${POI_IMAGE_NAME}
        - echo ${ARTIFACTORY_TOKEN} | docker login --username ${ARTIFACTORY_USER} --password-stdin ${ARTIFACTORY_SERVER}
        # this will be available in public as projects.packages.broadcom.com/photon/installer:$CI_COMMIT_SHORT_SHA
        - docker tag $POI_IMAGE_NAME ${ARTIFACTORY_SERVER}/$POI_IMAGE_NAME
        - docker push ${ARTIFACTORY_SERVER}/$POI_IMAGE_NAME
        # also as latest
        - docker tag ${ARTIFACTORY_SERVER}/$POI_IMAGE_NAME ${ARTIFACTORY_SERVER}/photon/installer:latest
        - docker push ${ARTIFACTORY_SERVER}/photon/installer:latest
