name: photon-os-installer CI on VCF

on: [push, workflow_dispatch]

env:
    POI_IMAGE_NAME_BASE: photon/installer
    GITHUB_BRANCH: master
    POI_REGISTRY: poi-registry:5000

jobs:
    build-container:
        runs-on: [ self-hosted, "docker:root" ]
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Build Docker image
              run: |
                POI_IMAGE_NAME=${POI_IMAGE_NAME_BASE}:${GITHUB_SHA::7}
                cd docker
                docker build -t $POI_IMAGE_NAME --build-context poi-helper=$(realpath $(pwd)/..) .
                docker tag ${POI_IMAGE_NAME} ${POI_REGISTRY}/${POI_IMAGE_NAME}
                docker push ${POI_REGISTRY}/${POI_IMAGE_NAME}
                docker system prune -f

    cayman_poi:
        runs-on: self-hosted
        steps:
            - name: Checkout Cayman POI
              uses: actions/checkout@master
              with:
                  repository: vcf/cayman-poi
                  ref: vmware-master
                  path: ./cayman-poi
                  submodules: "true"
                  fetch-depth: 0
                  ssh-key: ${{ secrets.POI_CICD_SSH_KEY }}
                  ssh-strict: "false"

            - name: create branch and push
              run: |
                  cd ./cayman-poi
                  git checkout -b test/poi-submodule/${GITHUB_SHA::7}
                  pushd poi/src
                  git checkout ${GITHUB_SHA::7}
                  popd
                  git add poi/src
                  git config --global user.email "poi-cd@broadcom.com"
                  git config --global user.name "POI CI/CD"
                  git commit -m "update poi/src to ${GITHUB_SHA::7} for testing branch ${{ github.ref_name }}"
                  git push origin test/poi-submodule/${GITHUB_SHA::7}

    ova-poi-harness:
        runs-on: [ self-hosted, "docker:root" ]
        needs: build-container

        strategy:
            fail-fast: false
            matrix:
                include:
                    - name: minimal
                      ova_config: minimal_ova.yaml
                      release: "5.0"
                    - name: minimal_lvm
                      ova_config: minimal_ova.yaml
                      release: "5.0"
                    - name: minimal
                      ova_config: minimal_ova.yaml
                      release: "4.0"
                    - name: gitlab-runner
                      ova_config: gitlab-runner_ova.yaml
                      release: "5.0"

        steps:
            - name: Checkout code
              uses: actions/checkout@master

            - name: Checkout POI Harness
              uses: actions/checkout@master
              with:
                  repository: vcf/photon-os-installer-harness
                  ref: main
                  path: ./poi-harness
                  ssh-key: ${{ secrets.POI_CICD_SSH_KEY }}
                  ssh-strict: "false"

            - name: build OVA
              env:
                  NAME: ${{ matrix.name }}
                  OVA_CONFIG: ${{ matrix.ova_config }}
                  PHOTON_RELEASE: ${{ matrix.release }}
              run: |
                  POI_IMAGE_NAME=${POI_IMAGE_NAME_BASE}:${GITHUB_SHA::7}
                  KS_FILE=${NAME}_ks.yaml
                  PHOTON_RELEASE="${PHOTON_RELEASE:-5.0}"
                  VM_NAME_BASE=ova-poi-harness-${GITHUB_SHA::7}
                  VM_NAME=${VM_NAME_BASE}-${NAME}-${PHOTON_RELEASE}
                  # used by pytest
                  export VC_IP=${{ vars.VC_IP }}
                  export VC_USER=${{ vars.VC_USER }}
                  export VC_PASSWORD=${{ secrets.VC_PASSWORD }}

                  docker pull ${POI_REGISTRY}/${POI_IMAGE_NAME}
                  docker tag ${POI_REGISTRY}/${POI_IMAGE_NAME} ${POI_IMAGE_NAME}

                  pushd examples/ova
                  docker run --rm --privileged -v/dev:/dev -v$(pwd):/workdir ${POI_IMAGE_NAME} create-image --repo-paths= -c ${KS_FILE} -v ${PHOTON_RELEASE}
                  docker run --rm -v$(pwd):/workdir -w/workdir ${POI_IMAGE_NAME} create-ova --ovf --mf --vmdk --installer-config ${KS_FILE} --ova-config ${OVA_CONFIG}
                  sudo chown -R $(id -u -n):$(id -g -n) .
                  popd

                  (cd poi-harness && echo "poi-harness sha is $(git rev-parse --short HEAD)")
                  pytest ./poi-harness/ci/pytest/ -rs --deploy --ovf examples/ova/*.ovf --name ${VM_NAME} --ks_config examples/ova/${KS_FILE} --ova_config examples/ova/${OVA_CONFIG}

    iso-poi-harness:
        runs-on: [ self-hosted, "docker:root" ]
        needs: build-container
        strategy:
            fail-fast: false
            matrix:
                name: [minimal, ostree]
        steps:
            - name: Checkout code
              uses: actions/checkout@master

            - name: Checkout POI Harness
              uses: actions/checkout@master
              with:
                  repository: vcf/photon-os-installer-harness
                  ref: main
                  path: ./poi-harness
                  ssh-key: ${{ secrets.POI_CICD_SSH_KEY }}
                  ssh-strict: false

            - name: build ISO
              env:
                  NAME: ${{ matrix.name }}
              run: |
                  POI_IMAGE_NAME=${POI_IMAGE_NAME_BASE}:${GITHUB_SHA::7}
                  VM_NAME_BASE=poi-iso-boot-${GITHUB_SHA::7}
                  ISO_OVF=photon5-iso-boot-${GITHUB_SHA::7}.ovf
                  KS_FILE=${NAME}_ks.yaml
                  VM_NAME=${VM_NAME_BASE}-${NAME}
                  # used by pytest
                  export VC_IP=${{ vars.VC_IP }}
                  export VC_USER=${{ vars.VC_USER }}
                  export VC_PASSWORD=${{ secrets.VC_PASSWORD }}

                  docker pull ${POI_REGISTRY}/${POI_IMAGE_NAME}
                  docker tag ${POI_REGISTRY}/${POI_IMAGE_NAME} ${POI_IMAGE_NAME}

                  pushd examples/iso
                  # create ISO
                  docker run --rm --privileged -v/dev:/dev -v$(pwd):/workdir ${POI_IMAGE_NAME} photon-iso-builder --config iso.yaml
                  # create OVF that includes that ISO, and a blank hard disk
                  # base64 encode the ks file, must have no new lines (-w0)
                  KSDATA64=$(base64 -w0 < ${KS_FILE})
                  docker run --rm -v$(pwd):/workdir ${POI_IMAGE_NAME} ova-compose -i iso_ova.yaml -o ${ISO_OVF} -m --param ksdata64=${KSDATA64}
                  sudo chown -R $(id -u -n):$(id -g -n) .
                  popd

                  (cd poi-harness && echo "poi-harness sha is $(git rev-parse --short HEAD)")
                  pytest ./poi-harness/ci/pytest/ -rs --deploy --ovf examples/iso/${ISO_OVF} --name ${VM_NAME} --ks_config examples/iso/${KS_FILE} --ova_config examples/iso/iso_ova.yaml --param ksdata64=${KSDATA64}

    github-public:
        runs-on: self-hosted
        needs:
            - cayman_poi
            - ova-poi-harness
            - iso-poi-harness
        if: github.ref_name == 'master'
        steps:
           - name: Checkout code
             uses: actions/checkout@master
             with:
                 fetch-depth: 0
           - name: push to public GitHub
             run: |
                 # token needs "repo, workflow" permissions
                 git remote add github https://gerrit-photon:${{ secrets.GERRIT_PHOTON_GITHUB_TOKEN }}@github.com/vmware/photon-os-installer.git || true
                 git push github
